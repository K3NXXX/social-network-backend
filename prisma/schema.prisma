generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Status is responsible for the ability to block a user
enum Status {
  ACTIVE
  INACTIVE
}

// Post privacy setting
enum Privacy {
  PUBLIC
  PRIVATE
}

// Friend request status
enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Notification type
enum NotificationType {
  LIKE
  COMMENT
  FRIEND_REQUEST
  FRIEND_ACCEPT
  NEW_FOLLOWER
}

// Rest of the schema remains unchanged since it was already in English
model User {
  id        String  @id @default(uuid())
  username  String? @unique
  email     String  @unique
  password  String
  firstName String
  lastName  String

  dateOfBirth DateTime?
  gender      String?

  avatarUrl String?
  avatarPublicId String?
  bio       String?
  location  String?

  isOnline      Boolean   @default(false)
  lastLogin     DateTime?
  amountOfPosts Int       @default(0)

  isActive   Status  @default(ACTIVE)
  isVerified Boolean @default(false) @map("is_verified")

  posts      Post[]
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]

  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")

  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("NotificationSender")

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Post {
  id      String   @id @default(uuid())
  content String
  privacy Privacy? @default(PUBLIC)
  photo   String?
  photoPublicId   String? 

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comments      Comment[]
  likes         Like[]
  savedBy       SavedPost[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id      String @id @default(uuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  likes         Like[]
  notifications Notification[]

  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  amount Int?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  notifications Notification[]

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model SavedPost {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, postId])
  @@map("saved_posts")
}

model Friendship {
  id     String       @id @default(uuid())
  status FriendStatus @default(PENDING)

  senderId String
  sender   User   @relation("SentFriendRequests", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([senderId, receiverId])
  @@map("friendships")
}

model Follow {
  id String @id @default(uuid())

  followerId String
  follower   User   @relation("Following", fields: [followerId], references: [id])

  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id      String           @id @default(uuid())
  type    NotificationType
  message String
  isRead  Boolean          @default(false)

  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id])

  senderId String?
  sender   User?   @relation("NotificationSender", fields: [senderId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  likeId String?
  like   Like?   @relation(fields: [likeId], references: [id]) 

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model Message {
  id      String  @id @default(uuid())
  content String
  isRead  Boolean @default(false)

  senderId String
  sender   User   @relation("SentMessages", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("messages")
}
